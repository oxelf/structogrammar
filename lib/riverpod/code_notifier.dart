import 'package:flutter_code_editor/flutter_code_editor.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:highlight/languages/cpp.dart';
import 'package:structogrammar/models/struct.dart';

class CodeNotifier extends Notifier<CodeController> {
  @override
  CodeController build() {
    return CodeController(language: cpp, text: "int main() \n { \n \n }");
  }

  void generate(Struct struct) {
    bool usesIostream = false;
    bool usesSTD = false;
    String generatedCode = "";
    String getCodeFromStruct(Struct struct) {
      String code = "";
      switch (struct.type) {
        case StructType.instruction:
          var instruction = (struct.data["instruction"] ?? "").toString();
          if ((instruction.contains("cout")) || (instruction.contains("cin"))) {
            usesIostream = true;
          }
          if (instruction.contains("std::")) {
            usesSTD = true;
          }
          return instruction;
        case StructType.ifSelect:
          code = "if (${struct.data["condition"]}) {";
          List<Struct> trueStructs = struct.subStructs
              .where((e) => e.data["ifCondition"] == "true")
              .toList();
          List<Struct> falseStructs = struct.subStructs
              .where((e) => e.data["ifCondition"] == "false")
              .toList();
          for (int i = 0; i < trueStructs.length; i++) {
            code += "\n\t\t\t${getCodeFromStruct(trueStructs[i])}";
          }
          code += "\n\t\t}";
          String elseCode = "";
          for (int i = 0; i < falseStructs.length; i++) {
            elseCode += "\n\t\t\t${getCodeFromStruct(falseStructs[i])}";
          }
          if (elseCode.replaceAll("\n", "").replaceAll("\t", "").isNotEmpty) {
            code += " else {";
            code += elseCode;
            code += "\n\t\t}";
          }
          return code;
        case StructType.loop:
          code =
              "${struct.data["loopType"] ?? ""} (${struct.data["condition"]}) \n{";
          for (int i = 0; i < struct.subStructs.length; i++) {
            code += "\n\t${getCodeFromStruct(struct.subStructs[i])}";
          }
          code += "\n}";
          return code;
        case StructType.repeat:
          code = "do {";
          for (int i = 0; i < struct.subStructs.length; i++) {
            code += "\n\t${getCodeFromStruct(struct.subStructs[i])}";
          }
          code += "\n}";
          code += " while (${struct.data["condition"]});";
          return code;
        case StructType.function:
          code = "int ${struct.data["text"] ?? ""} \n{";
          for (int i = 0; i < struct.subStructs.length; i++) {
            code += "\n\t${getCodeFromStruct(struct.subStructs[i])}";
          }
          code += "\n}";
          return code;
        default:
          return "";
      }
    }

    generatedCode = getCodeFromStruct(struct);
   String newCode = "";
    newCode = "// Code generated by structogrammar \n\n";
    if (usesIostream) {
      newCode = newCode + "#include <iostream>\n";
    }
    if (!usesSTD) {
      newCode = newCode + "using namespace std;\n";
    }
    newCode += "\n";
newCode += generatedCode;
    state.fullText = newCode;
  }
}

final codePod = NotifierProvider<CodeNotifier, CodeController>(() {
  return CodeNotifier();
});

final codeInputPod = NotifierProvider<CodeNotifier, CodeController>(() {
  return CodeNotifier();
});
